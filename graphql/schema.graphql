type Query {
  getAppSettings: SettingsResponse @cacheControl(scope: PRIVATE)
  # Roles
  getRole(id: ID!): Role @cacheControl(scope: PRIVATE, maxAge: SHORT)
  hasUsers(slug: String!): Boolean @cacheControl(scope: PRIVATE, maxAge: SHORT)
  listRoles: [Role]
    @cacheControl(scope: PRIVATE, maxAge: SHORT)
    @settings(settingsType: "workspace")
    @withSession
  # Features
  getFeaturesByModule(module: String!): Feature
    @settings(settingsType: "workspace")
    @cacheControl(scope: PRIVATE, maxAge: SHORT)
  listFeatures: [FullFeature]
    @settings(settingsType: "workspace")
    @cacheControl(scope: PRIVATE, maxAge: SHORT)
  # Profile
  # getProfile(id: ID!): Profile @cacheControl(scope: PRIVATE)
  # getProfileByRole(roleId: ID!): Profile @cacheControl(scope: PRIVATE)
  # listProfiles: [Profile] @cacheControl(scope: PRIVATE, maxAge: SHORT)
  # User
  getUser(id: ID!): User @cacheControl(scope: PRIVATE)
  getUserByEmail(email: String!): User @cacheControl(scope: PRIVATE)
  listUsers: [User] @cacheControl(scope: PRIVATE, maxAge: SHORT)
  checkUserPermission: UserPermissions
    @settings(settingsType: "workspace")
    @withSession
    @withSender
    @cacheControl(scope: PRIVATE, maxAge: SHORT)
}

type UserPermissions {
  role: SimpleRole
  permissions: [String]
}

type Mutation {
  saveAppSettings: MutationResponse @cacheControl(scope: PRIVATE)
  # Roles
  saveRole(id: ID, name: String!, features: [FeatureInput]): MutationResponse
    @cacheControl(scope: PRIVATE)
  deleteRole(id: ID!): MutationResponse @cacheControl(scope: PRIVATE)
  # Profile
  # saveProfile(roleId: ID!, features: [FeatureInput]!): MutationResponse @cacheControl(scope: PRIVATE)
  # deleteProfile(id: ID!): MutationResponse @cacheControl(scope: PRIVATE)
  # User
  saveUser(
    id: ID
    roleId: ID!
    userId: ID
    canImpersonate: Boolean = false
    name: String!
    email: String!
  ): MutationResponse @cacheControl(scope: PRIVATE)
  deleteUser(id: ID!, userId: ID): MutationResponse
    @cacheControl(scope: PRIVATE)
}

type User {
  id: ID
  roleId: ID!
  userId: String
  name: String!
  email: String!
  canImpersonate: Boolean
}

type Profile {
  id: ID
  name: String
  features: [Feature]!
  roleId: ID!
  scoped: Boolean
}

input FeatureInput {
  module: String!
  features: [String]!
}

type FeatureType {
  module: String!
  features: [String]!
}

type FullFeature {
  module: String!
  name: String!
  features: [SingleFeature]!
}

type Feature {
  module: String!
  name: String!
  features: [String]!
}

type SingleFeature {
  label: String!
  value: String!
}

type Role {
  id: ID
  name: String!
  locked: Boolean
  slug: String
  features: [FeatureType]
}

type SimpleRole {
  id: ID
  name: String!
  slug: String
}

type MutationResponse {
  id: String
  status: String
  message: String
}

type SettingsResponse {
  adminSetup: Data
}

scalar Data
